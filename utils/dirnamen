#!/bin/bash
# vim: set ts=4 sw=4 expandtab :
#########################################
#
#  dirnamen [directory] [N(#) levels] - prints the parent directory N levels up.
#
#     This program is part of shell-advancedutils ( https://github.com/kata198/shell-advancedutils )
#       Copyright (c) 2016, 2017, 2018 Timothy Savannah All Rights Reserved
#       Licensed under the terms of the GNU General Public License 2.1, or the license found
#       at https://raw.githubusercontent.com/kata198/shell-advancedutils/master/LICENSE
#
#  Usage: dirnamen (Option) [command]
#
#   Options:
#
#     -v  or --verbose   - Verbose mode. Do not redirect stdout to /dev/null. Default is to be silent.
#
#     -q  or --quiet  (Default) - Quiet mode (The default). Redirects output to /dev/null
#
#  Example:
#   [@]$ bgtask updatedb # Run updatedb as a background task
#   [@]$ bgtask find . -exec chmod g+w '{}' ';' # Add group-write perms to all files/dirs sub to current
#   [@]$ bgtask -v find . -type f > files.lst # In the background generate a list of all files at "files.lst"
#
#
###################################################################

# dirnamen - Get parent directory name at a specific level
#
#  Usage: dirnamen [directory] [N levels]
#
#   First line of output is the directory name after N parent levels,
#    second line is the base name of the directory at that level

echoerr() {
    echo "$@" >&2
}

usage() {
    echoerr "Usage: dirnamen [directory] [N levels]"
    echoerr "  Discovers information about the Nth parent of a given directory"
    echoerr;
    echoerr "Outputs two lines:"
    echoerr "  The first line is the path N levels up"
    echoerr "  The second line is the basename of the directory N levels up (i.e. last entry popped)"
    echoerr;
}

if [[ $# -ne 2 ]] || ( splitContains '--help' ' ' "$@" ) || ( splitContains '--sau-help' ' ' "$@" ) 
then
    usage;
    exit 1;
fi

DIRNAME="$(realpath ${1})"
N_DIR="${2}"

if ( ! isdigit "${N_DIR}" ) || [[ "${N_DIR}" -lt 0 ]];
then
    echo "Second argument is not a valid integer >= 0"
fi

if [[ ${N_DIR} = 0 ]];
then
    echo "${DIRNAME}"
    echo;
else
    NEW_DIRNAME="${DIRNAME}"
    for i in `seq ${N_DIR}`;
    do
        BASENAME="$(basename "${NEW_DIRNAME}")"
        NEW_DIRNAME="$(dirname "${NEW_DIRNAME}")"
    done

    echo "${NEW_DIRNAME}"
    echo "${BASENAME}"
fi

